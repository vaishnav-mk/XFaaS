AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  stepfunctions-template
  Sample SAM Template for stepfunctions-template
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active
  Api:
    TracingEnabled: True
Outputs:
  {{stepfunctionarn}}:
    Description: "Serwo CLI State machine ARN"
    Value: !Ref {{stepfunctionname}}
  {{stepfunctionrolearn}}:
    Description: "IAM Role created for Serwo CLI State machine based on the specified SAM Policy Templates"
    Value: !GetAtt {{stepfunctionrolearn_attribute}}
  ## Output API ##
  ExecuteApi:
    Description: "Execute API endpoint"
    Value: !Sub "https://${ExecuteAPIForWF}.execute-api.${AWS::Region}.amazonaws.com/serwo"
Resources:
  {{stepfunctionname}}:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: {{serwouri}}
      DefinitionSubstitutions:
        {% for arn in arns -%}
        {{ arn.name }}: {{ arn.ref }}
        {% endfor %}

      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        {% for policy in policies -%}
        - LambdaInvokePolicy:
            FunctionName: !Ref {{policy.name}}
        {% endfor %}

##########################################################################
#   REST API                                                             #
##########################################################################
  ExecuteAPIForWF:
     Type: AWS::Serverless::Api
     Properties:
        StageName: serwo
        DefinitionBody: # an OpenApi definition
          'Fn::Transform':
            Name: 'AWS::Include'
            Parameters:
              Location: {{apifilename}}
        OpenApiVersion: 3.0.3
        EndpointConfiguration:
            Type: REGIONAL

##########################################################################
#   Roles                                                               #
##########################################################################
  ExecuteApiRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
      - PolicyName: AllowSFNExec
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: "states:StartExecution"
              Resource: !GetAtt {{stepfunctionsarnatrribute}}

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'sqs:SendMessage'
                Resource: 'arn:aws:sqs:*:*:*'
  
  {% for function in functions -%}
  {{function.name}}:
    {% if function.iscontainer %}
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Timeout: 600
      MemorySize: {{function.memory}}
      {%if function.name == "CollectLogs" %}
      Role: !GetAtt LambdaExecutionRole.Arn
      {% endif %}
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./functions/{{function.name}}
      DockerTag: python3.9-v1
    {% else %}
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: {{ function.uri }}
      Handler: {{ function.handler }}
      Runtime: python3.9
      MemorySize: {{ function.memory }}
      Timeout: 300
      {%if function.name == "CollectLogs" %}
      Role: !GetAtt LambdaExecutionRole.Arn
      {% endif %}
      Architectures:
        - x86_64
    {% endif%}
  {% endfor %}